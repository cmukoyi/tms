# .circleci/config.yml
version: 2.1

orbs:
  python: circleci/python@2.0.3

jobs:
  test:
    docker:
      - image: cimg/python:3.9
      - image: cimg/mysql:8.0
        environment:
          MYSQL_ROOT_PASSWORD: testpassword
          MYSQL_DATABASE: tender_management_test
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpass
    
    working_directory: ~/project
    
    steps:
      - checkout
      
      - run:
          name: Install System Dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y mysql-client netcat
      
      - python/install-packages:
          pkg-manager: pip
          pip-dependency-file: requirements.txt
      
      - run:
          name: Wait for MySQL
          command: |
            echo "Waiting for MySQL to be ready..."
            for i in `seq 1 60`; do
              if nc -z 127.0.0.1 3306; then
                echo "MySQL is ready!"
                break
              fi
              echo -n "."
              sleep 2
            done
            # Test MySQL connection
            mysql -h 127.0.0.1 -u root -ptestpassword -e "SELECT 1" || {
              echo "Failed to connect to MySQL"
              exit 1
            }
      
      - run:
          name: Setup Test Database
          command: |
            echo "Setting up test database..."
            mysql -h 127.0.0.1 -u root -ptestpassword -e "CREATE DATABASE IF NOT EXISTS tender_management_test CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
            mysql -h 127.0.0.1 -u root -ptestpassword -e "CREATE USER IF NOT EXISTS 'testuser'@'%' IDENTIFIED BY 'testpass';"
            mysql -h 127.0.0.1 -u root -ptestpassword -e "GRANT ALL PRIVILEGES ON tender_management_test.* TO 'testuser'@'%';"
            mysql -h 127.0.0.1 -u root -ptestpassword -e "FLUSH PRIVILEGES;"
            
            # Test the testuser connection
            mysql -h 127.0.0.1 -u testuser -ptestpass -e "USE tender_management_test; SELECT 1;" || {
              echo "Failed to connect with testuser"
              exit 1
            }
            echo "Database setup completed successfully"
      
      - run:
          name: Run Tests
          command: |
            export DATABASE_URL="mysql://testuser:testpass@127.0.0.1:3306/tender_management_test"
            export FLASK_ENV=testing
            export SECRET_KEY="test-secret-key"
            
            # Check if tests directory exists
            if [ -d "tests" ]; then
              echo "Running pytest tests..."
              python -m pytest tests/ -v --tb=short
            else
              echo "No tests directory found. Creating a simple test to verify setup..."
              mkdir -p tests
              cat > tests/test_basic.py << 'EOF'
import pytest
from app import create_app, db

@pytest.fixture
def app():
    app = create_app()
    app.config['TESTING'] = True
    app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql://testuser:testpass@127.0.0.1:3306/tender_management_test'
    return app

@pytest.fixture
def client(app):
    return app.test_client()

def test_app_creation(app):
    assert app is not None
    assert app.config['TESTING'] is True

def test_database_connection(app):
    with app.app_context():
        # Test database connection
        result = db.engine.execute('SELECT 1').scalar()
        assert result == 1
EOF
              python -m pytest tests/ -v --tb=short
            fi
      
      - run:
          name: Run Linting
          command: |
            pip install flake8
            # Only lint if app directory exists
            if [ -d "app" ]; then
              echo "Running flake8 on app directory..."
              flake8 app/ --max-line-length=120 --ignore=E501,W503 --exclude=__pycache__,migrations
            else
              echo "No app directory found, skipping linting"
            fi

  deploy:
    docker:
      - image: cimg/python:3.9
    
    working_directory: ~/project
    
    steps:
      - checkout
      
      - run:
          name: Install deployment dependencies
          command: |
            pip install requests paramiko
      
      - run:
          name: Deploy to PythonAnywhere
          command: |
            python scripts/deploy.py

workflows:
  test_and_deploy:
    jobs:
      - test
      - deploy:
          requires:
            - test
          filters:
            branches:
              only: main